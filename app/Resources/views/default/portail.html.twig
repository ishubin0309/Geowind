{% extends 'base.html.twig' %}

{% set title = 'Portail' %}
{% set item = 'portail' %}

{% block body %}
  <style>
    .btn-outline-success {
      background-color: white;
      color: green;
    }
    .btn-outline-danger {
      background-color: white;
      color: red;
    }
  </style>
  <div class="container-fluid">

    {% set projetsPageTotal = 0 %}
    {% set unreadMessages = 0 %}
    {% for projet in projets %}
      {% set projetsPageTotal = projetsPageTotal + 1 %}
      {# {% if is_granted('edit', projet) %} #}
        {% for message in projet.messages %}
          {% if message.createdBy is not null and (app.user.id != message.createdBy.id and app.user not in message.viewers) %}{% set unreadMessages = unreadMessages + 1 %}{% endif %}
        {% endfor %}
      {# {% endif %} #}
    {% endfor %}
    {% if is_granted('ROLE_VIEW_ALL') %}
      <a href="{{ path('liste_new') }}" class="btn btn-info btn-sm"><i class="fa fa-paperclip"></i> Importer Liste</a>
    {% endif %}
    {% if is_granted('ROLE_CREATE') %}
      <a href="{{ path('projet_new') }}" class="btn btn-success btn-sm"><i class="fa fa-file-o"></i> Nouvelle fiche</a>
    {% endif %}
    <a id="button-show" class="btn btn-primary btn-sm disabled"><i class="fa fa-fw fa-eye"></i> Aperçu</a>
    <a id="button-export" class="btn btn-primary btn-sm disabled"><i class="fa fa-fw fa-file-excel-o"></i> CSV</a>
    <a id="button-pdf" class="btn btn-primary btn-sm disabled"><i class="fa fa-fw fa-file-excel-o"></i> PDF</a>
    <a id="button-edit" class="btn btn-warning btn-sm disabled"><i class="fa fa-fw fa-pencil"></i> Editer</a>
    <a id="button-archive" class="btn btn-warning btn-sm disabled"><i class="fa fa-fw fa-archive"></i> Archiver</a>
    <button id="button-delete" class="btn btn-danger btn-sm" disabled data-placement="right" title="Double click"><i class="fa fa-fw fa-trash"></i> Supprimer</button>
    {% if is_granted('ROLE_EDIT_ALL') and liste.id is defined %}
      <button id="button-liste-delete" class="btn btn-danger btn-sm" title="Double click"><i class="fa fa-fw fa-trash"></i> Supprimer Liste</button>
    {% endif %}
    <a id="button-unread" class="btn btn-success btn-outline-success btn-sm"><i class="fa fa-fw fa-filter"></i> {{ unreadMessages }} Message{% if unreadMessages > 1 %}s{% endif %}</a>
    <br>
    <h4 id="selected-counter">0 site sélectionné sur {{ projetsPageTotal }}</h4>
    <div class="row col-md-12">
      <div class="col-md-3 col-lg-2">
        <select id="change_type" class="form-control">
          <option value="1">Liste-par défaut</option>
          <option value="3" {% if columnsType == 3 %}selected{% endif %}>Liste-état fiche</option>
          <option value="2" {% if columnsType == 2 %}selected{% endif %}>Liste-taches</option>
          <option value="4" {% if columnsType == 4 %}selected{% endif %}>Liste-accords</option>
          <option value="5" {% if columnsType == 5 %}selected{% endif %}>Liste-risques</option>
          <option value="6" {% if columnsType == 6 %}selected{% endif %}>Liste-utilisateurs</option>
        </select>
      </div>
      <div class="col-md-3 col-lg-2">
        <select id="select-typeProjet" class="form-control input-filter" data-attr="typeProjet">
          <option value="">Type de projet</option>
          {% for code, type in typesProjet %}
            <option value="{{ code }}" {% if code == typeProjet %}selected{% endif %}>{{ type }}</option>
          {% endfor %}
        </select>
      </div>
      <div class="col-md-3 col-lg-2">
        <select id="select-origine" class="form-control input-filter" data-attr="origine">
          <option value="">Source</option>
        </select>
      </div>
      <div class="col-md-2 col-lg-2">
        <select id="select-chefProjet" class="form-control input-filter" data-attr="chefProjet">
          <option value="">Chef projet</option>
        </select>
      </div>
      <div class="col-md-2 col-lg-2">
        <select id="select-chargeFoncier" class="form-control input-filter" data-attr="chargeFoncier">
          <option value="">Chargé foncier</option>
        </select>
      </div>
      <div class="col-md-2 col-lg-2">
        <select id="select-partenaire" class="form-control input-filter" data-attr="partenaire">
          <option value="0">Partenaire</option>
        </select>
      </div>
      <div class="col-md-2 col-lg-2">
      </div>
      <div class="col-md-2 col-lg-2">
        <select id="select-departement" class="form-control input-filter" data-attr="departement">
          <option value="">Département</option>
        </select>
      </div>
      <div class="clearfix"></div>
      <div class="col-md-9 col-lg-10">
        <nav aria-label="Page navigation center-text">
          <ul style="margin: 0px;margin-bottom: 10px;" class="pagination">
            {% if totalPages %}
            {% set route_path = liste.id is defined ? path('view_liste', {'liste' : liste.id}) : path('homepage') %}
            <li class="page-item {% if page <= 1 %}disabled{% endif %}"><a class="page-link" href="{% if page > 1 %}{{ route_path ~ '?page=' ~ (page - 1) }}{% if columnsType > 1 %}&type={{ columnsType }}{% endif %}{% if typeProjet %}&typeProjet={{ typeProjet }}{% endif %}{% if departement %}&departement={{ departement }}{% endif %}{% if origine %}&origine={{ origine }}{% endif %}{% if chefProjet %}&chefProjet={{ chefProjet }}{% endif %}{% if chargeFoncier %}&chargeFoncier={{ chargeFoncier }}{% endif %}{% if partenaire != '0' %}&partenaire={{ partenaire }}{% endif %}{% else %}#{% endif %}">Précédent</a></li>
            {% for i in 1..totalPages %}
              <li class="page-item {% if page == i %}active{% endif %}"><a class="page-link" href="{{ route_path ~ '?page=' ~ i }}{% if columnsType > 1 %}&type={{ columnsType }}{% endif %}{% if typeProjet %}&typeProjet={{ typeProjet }}{% endif %}{% if departement %}&departement={{ departement }}{% endif %}{% if origine %}&origine={{ origine }}{% endif %}{% if chefProjet %}&chefProjet={{ chefProjet }}{% endif %}{% if chargeFoncier %}&chargeFoncier={{ chargeFoncier }}{% endif %}{% if partenaire != '0' %}&partenaire={{ partenaire }}{% endif %}">{{ i }}</a></li>
            {% endfor %}
            <li class="page-item {% if page >= totalPages %}disabled{% endif %}"><a class="page-link" href="{% if page < totalPages %}{{ route_path ~ '?page=' ~ (page + 1) }}{% if columnsType > 1 %}&type={{ columnsType }}{% endif %}{% if typeProjet %}&typeProjet={{ typeProjet }}{% endif %}{% if departement %}&departement={{ departement }}{% endif %}{% if origine %}&origine={{ origine }}{% endif %}{% if chefProjet %}&chefProjet={{ chefProjet }}{% endif %}{% if chargeFoncier %}&chargeFoncier={{ chargeFoncier }}{% endif %}{% if partenaire != '0' %}&partenaire={{ partenaire }}{% endif %}{% else %}#{% endif %}">Suivant</a></li>
            {% endif %}
          </ul>
        </nav>
      </div>
    </div>

  </div>

  <div id="start-grid"></div>
  <div id="grid" class="excel-grid"></div>

  <div id="export-modal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
          <h4 class="modal-title">Exporter CSV</h4>
        </div>
        <form id="csv-form" method="POST">
          <div class="modal-body">
            <input id="export-csv-ids" type="hidden" name="ids">
            {% for key, option in export_option.optionList %}
              <label><input type="checkbox" name="selectedFields[]" checked value="{{ key }}"> {{ option }}</label><br>
            {% endfor %}

          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-default" data-dismiss="modal">Annuler</button>
            <button type="submit" class="btn btn-success"><i class="fa fa-fw fa-file-excel-o"></i> Export CSV</button>
          </div>
        </form>
      </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
  </div><!-- /.modal -->

{% endblock %}

{% block js %}
  
    <script>$('#change_type').change(function() {window.location = '{{ liste.id is defined ? path('view_liste', {'liste' : liste.id}) : path('homepage') }}' + '?page={{ page }}&type=' + $(this).val();});</script>
  <script>

    $("#grid").css({ top: $('#start-grid').position().top + 'px' });

    var options = {
      enableCellNavigation: true,
      enableColumnReorder: false,
      enableTextSelectionOnCells: true,
      forceFitColumns: false
    };

    var checkboxSelector = new Slick.CheckboxSelectColumn({
      cssClass: "slick-cell-checkboxsel"
    });

    var typeProjet = {{ grid_helper.getJsonTypeProjets|raw }};
    var typeProjetIcons = {{ grid_helper.getJsonIconsTypeProjets|raw }};
    var typeSite = {{ grid_helper.getJsontypeSites|raw }};
    var phases = {{ grid_helper.getJsonPhases|raw }};
    var progressions = {{ grid_helper.getJsonProgressions|raw }};
    var environnements = {{ grid_helper.getJsonEnvironnements|raw }};
    var taches = {{ grid_helper.getJsonTacheList|raw }};
    var dynamiques = {{ grid_helper.getJsonDynamiques|raw }};

    function typeProjetFormatter(row, cell, value, columnDef, dataContext) {
      return typeProjetIcons[value] !== undefined ? '<span style="display:none;">' + typeProjet[value]['name'] + '</span>' + typeProjetIcons[value]['name'] : value;
    }

    function typeSiteFormatter(row, cell, value, columnDef, dataContext) {
      return typeSite[value] !== undefined ? typeSite[value]['name'] : value;
    }

    function phaseFormatter(row, cell, value, columnDef, dataContext) {
      return phases[value] !== undefined ? phases[value]['name'] : value;
    }

    function progressionFormatter(row, cell, value, columnDef, dataContext) {
      return progressions[value] !== undefined ? progressions[value]['name'] : value;
    }

    function tacheFormatter(row, cell, value, columnDef, dataContext) {
      return taches[value] !== undefined ? taches[value]['name'] : value;
    }

    function environnementFormatter(row, cell, value, columnDef, dataContext) {
      return environnements[value]['name'];
    }
    function dynamiqueFormatter(row, cell, value, columnDef, dataContext) {
      if(value == '-2') var color = '#00FF66';
      else if(value == '-1') var color = '#66CCFF';
      else if(value == '0') var color = '#FFFF00';
      else if(value == '1') var color = '#FF9900';
      else if(value == '2') var color = '#FF3333';
      else var color = '';
      return dynamiques[value] !== undefined ? '<span style="background-color: '+color+';padding-top:2px;padding-bottom:2px;padding-left:10px;display:block;">' + dynamiques[value]['name'] + '</span>' : value;
    }

    function accordsFormatter(row, cell, value, columnDef, dataContext) {
      return '<b>' + value + '</b>';
    }

    function completudeFormatter(row, cell, value, columnDef, dataContext) {
      return '<b>' + value + '%</b>';
    }

    var flashCircle = '{{ asset('images/circle-flash.gif')|e('js') }}';
    function progressionIndicateurFormatter(row, cell, value, columnDef, dataContext) {
      var color = progressions[value] !== undefined ? progressions[value]['color'] : '#FFFFFF';
      var classes = 'indicateur';
      {# if (value == 'nouveau' || value == 'verification' || value == 'identification' || value == 'contacts' || value == 'en_attente') {
        var classes = 'indicateur-flash';
        return '<div class="' + classes + '"></div>';
      } #}
      if (value == 'signatures') {
        var classes = 'indicateur indicateur-blink';
        return '<div class="' + classes + '"></div>';
      }
      return '<div class="' + classes + '" style="background:'+color+';"></div>';
    }

    var checkboxColumn = checkboxSelector.getColumnDefinition();
    checkboxColumn.maxWidth = 25;
    checkboxColumn.width = 25;
    checkboxColumn.headerCssClass = 'slick-header-column-checkboxsel';

    var grid;
    var dataView = new Slick.Data.DataView();

    var columns = [
    {% if columnsType == 1 %}
      checkboxColumn,
      { id: "id", name: "ID", field: "id", width: 70, maxWidth: 100, sortable: true, sorter: numericSorter, },
      { id: "typeProjet", name: "Type de projet", field: "typeProjet", width: 70, maxWidth: 250, formatter: typeProjetFormatter, sortable: true, sorter: stringSorter, },
      { id: "typeSite", name: "Type de Bien", field: "typeSite", width: 70, maxWidth: 250, formatter: typeSiteFormatter, sortable: true, sorter: stringSorter, },
      { id: "environnement", name: "Type de milieu", field: "environnement", sortable: true, sorter: stringSorter, formatter: environnementFormatter, width: 110, maxWidth: 110 },
      { id: "region", name: "Région", field: "region", sortable: true, sorter: stringSorter, maxWidth: 250 },
      { id: "departement", name: "Département", field: "departement", sortable: true, sorter: stringSorter, width: 130, maxWidth: 250 },
      { id: "commune", name: "Commune", field: "commune", sortable: true, sorter: stringSorter, maxWidth: 250 },
      { id: "plan", name: "Plan", field: "plan", sortable: true, sorter: stringSorter, maxWidth: 100 },
      { id: "potentiel", name: "Potentiel (MW)", field: "potentiel", sortable: true, cssClass: 'text-right', sorter: numericSorter, width: 100, maxWidth: 100 },
      { id: "phase", name: "Phase", field: "phase", sortable: true, sorter: stringSorter, formatter: phaseFormatter, width: 110, maxWidth: 110 },
      { id: "progression", name: "Etat", field: "progression", sortable: true, sorter: stringSorter, formatter: progressionFormatter, width: 110, maxWidth: 110 },
      { id: "progressionIndicateur", name: "<i style='color:red;font-size: 1.3em;' class='fa fa-flag-checkered'></i>", field: "progressionIndicateur", width: 26, maxWidth: 26, cssClass: 'column-progression-indicateur', formatter: progressionIndicateurFormatter },
      { id: "completude", name: "Etat fiche", field: "completude", sortable: true, cssClass: 'text-right', sorter: numericSorter, formatter: completudeFormatter, width: 60, maxWidth: 100 },
      { id: "dateCrea", name: '<strong>Date création</strong>', field: "dateCrea", sortable: true, sorter: dateSorter, width: 100, maxWidth: 250},
      { id: "dateMaj", name: '<strong>Date majour</strong>', field: "dateMaj", sortable: true, sorter: dateSorter, width: 100, maxWidth: 250},
      { id: "dateDiff", name: "<strong>J+</strong>", field: "dateDiff", sortable: true, sorter: stringSorter, formatter: progressionFormatter, width: 40, maxWidth: 100 },
    {% elseif columnsType == 2 %}
      checkboxColumn,
      { id: "id", name: "ID", field: "id", width: 70, maxWidth: 100, sortable: true, sorter: numericSorter, },
      { id: "typeProjet", name: "Type de projet", field: "typeProjet", width: 70, maxWidth: 250, formatter: typeProjetFormatter, sortable: true, sorter: stringSorter, },
      { id: "typeSite", name: "Type de Bien", field: "typeSite", width: 70, maxWidth: 250, formatter: typeSiteFormatter, sortable: true, sorter: stringSorter, },
      { id: "departement", name: "Département", field: "departement", sortable: true, sorter: stringSorter, maxWidth: 250 },
      { id: "potentiel", name: "Potentiel (MW)", field: "potentiel", sortable: true, cssClass: 'text-right', sorter: numericSorter, width: 100, maxWidth: 100 },
      { id: "phase", name: "Phase", field: "phase", sortable: true, sorter: stringSorter, formatter: phaseFormatter, width: 110, maxWidth: 110 },
      { id: "progression", name: "Etat", field: "progression", sortable: true, sorter: stringSorter, formatter: progressionFormatter, width: 110, maxWidth: 110 },
      { id: "progressionIndicateur", name: "<i style='color:red;font-size: 1.3em;' class='fa fa-flag-checkered'></i>", field: "progressionIndicateur", width: 26, maxWidth: 26, cssClass: 'column-progression-indicateur', formatter: progressionIndicateurFormatter },
      { id: "servitudes", name: "Servitudes", field: "servitudes", sortable: true, sorter: stringSorter, formatter: tacheFormatter, maxWidth: 250 },
      { id: "foncier", name: "Foncier", field: "foncier", sortable: true, sorter: stringSorter, formatter: tacheFormatter, maxWidth: 250 },
      { id: "mairie", name: "Mairie", field: "mairie", sortable: true, sorter: stringSorter, formatter: tacheFormatter, maxWidth: 250 },
      { id: "consultations", name: "Consultations", field: "consultations", sortable: true, sorter: stringSorter, formatter: tacheFormatter, maxWidth: 250 },
      { id: "urbanisme", name: "Urbanisme", field: "urbanisme", sortable: true, sorter: stringSorter, formatter: tacheFormatter, maxWidth: 250 },
      {# { id: "concertation", name: "Concertation", field: "concertation", sortable: true, sorter: stringSorter, formatter: tacheFormatter, maxWidth: 250 }, #}
      { id: "dateCrea", name: '<strong>Date création</strong>', field: "dateCrea", sortable: true, sorter: dateSorter, width: 100, maxWidth: 250},
      { id: "dateMaj", name: '<strong>Date majour</strong>', field: "dateMaj", sortable: true, sorter: dateSorter, width: 100, maxWidth: 250},
      { id: "dateDiff", name: "<strong>J+</strong>", field: "dateDiff", sortable: true, sorter: stringSorter, formatter: progressionFormatter, width: 40, maxWidth: 100 },
    {% elseif columnsType == 3 %}
      checkboxColumn,
      { id: "id", name: "ID", field: "id", width: 70, maxWidth: 150, sortable: true, sorter: numericSorter, },
      { id: "typeProjet", name: "Type de projet", field: "typeProjet", width: 70, maxWidth: 250, formatter: typeProjetFormatter, sortable: true, sorter: stringSorter, },
      {# { id: "typeSite", name: "Type de Bien", field: "typeSite", width: 70, maxWidth: 250, formatter: typeSiteFormatter, sortable: true, sorter: stringSorter, }, #}
      { id: "departement", name: "Département", field: "departement", sortable: true, sorter: stringSorter, maxWidth: 250 },
      { id: "potentiel", name: "Potentiel (MW)", field: "potentiel", sortable: true, cssClass: 'text-right', sorter: numericSorter, width: 100, maxWidth: 200 },
      { id: "phase", name: "Phase", field: "phase", sortable: true, sorter: stringSorter, formatter: phaseFormatter, width: 110, maxWidth: 250 },
      { id: "progression", name: "Etat", field: "progression", sortable: true, sorter: stringSorter, formatter: progressionFormatter, width: 110, maxWidth: 250 },
      { id: "progressionIndicateur", name: "<i style='color:red;font-size: 1.3em;' class='fa fa-flag-checkered'></i>", field: "progressionIndicateur", width: 26, maxWidth: 26, cssClass: 'column-progression-indicateur', formatter: progressionIndicateurFormatter },
      {# { id: "dynamique", name: "Dynamique", field: "dynamique", sortable: true, sorter: stringSorter, formatter: dynamiqueFormatter, width: 110, maxWidth: 250 }, #}
      { id: "completude", name: "Etat fiche", field: "completude", sortable: true, cssClass: 'text-right', sorter: numericSorter, formatter: completudeFormatter, width: 60, maxWidth: 200 },
      { id: "dateCrea", name: '<strong>Date création</strong>', field: "dateCrea", sortable: true, sorter: dateSorter, width: 100, maxWidth: 250},
      { id: "dateMaj", name: '<strong>Date majour</strong>', field: "dateMaj", sortable: true, sorter: dateSorter, width: 100, maxWidth: 250},
      { id: "dateDiff", name: "<strong>J+</strong>", field: "dateDiff", sortable: true, sorter: stringSorter, formatter: progressionFormatter, width: 40, maxWidth: 150 },
    {% elseif columnsType == 4 %}
      checkboxColumn,
      { id: "id", name: "ID", field: "id", width: 70, maxWidth: 100, sortable: true, sorter: numericSorter, },
      { id: "typeProjet", name: "Type de projet", field: "typeProjet", width: 70, maxWidth: 250, formatter: typeProjetFormatter, sortable: true, sorter: stringSorter, },
      { id: "typeSite", name: "Type de Bien", field: "typeSite", width: 70, maxWidth: 250, formatter: typeSiteFormatter, sortable: true, sorter: stringSorter, },
      { id: "departement", name: "Département", field: "departement", sortable: true, sorter: stringSorter, maxWidth: 250 },
      { id: "potentiel", name: "Potentiel (MW)", field: "potentiel", sortable: true, cssClass: 'text-right', sorter: numericSorter, width: 100, maxWidth: 150 },
      { id: "phase", name: "Phase", field: "phase", sortable: true, sorter: stringSorter, formatter: phaseFormatter, width: 110, maxWidth: 250 },
      { id: "progression", name: "Etat", field: "progression", sortable: true, sorter: stringSorter, formatter: progressionFormatter, width: 110, maxWidth: 150 },
      { id: "progressionIndicateur", name: "<i style='color:red;font-size: 1.3em;' class='fa fa-flag-checkered'></i>", field: "progressionIndicateur", width: 26, maxWidth: 26, cssClass: 'column-progression-indicateur', formatter: progressionIndicateurFormatter },
      { id: "foncier", name: "Foncier", field: "foncier", sortable: true, sorter: stringSorter, formatter: tacheFormatter, width: 150, maxWidth: 250 },
      { id: "accords", name: "Accords", field: "accords", sortable: true, sorter: stringSorter, formatter: accordsFormatter, width: 100, maxWidth: 250 },
      { id: "accordsPourcentage", name: "Accords %", field: "accordsPourcentage", sortable: true, cssClass: 'text-right', sorter: numericSorter, formatter: completudeFormatter, width: 60, maxWidth: 100 },
      { id: "dateCrea", name: '<strong>Date création</strong>', field: "dateCrea", sortable: true, sorter: dateSorter, width: 100, maxWidth: 250},
      { id: "dateMaj", name: '<strong>Date majour</strong>', field: "dateMaj", sortable: true, sorter: dateSorter, width: 100, maxWidth: 250},
      { id: "dateDiff", name: "<strong>J+</strong>", field: "dateDiff", sortable: true, sorter: stringSorter, formatter: progressionFormatter, width: 40, maxWidth: 150 },
    {% elseif columnsType == 5 %}
      checkboxColumn,
      { id: "id", name: "ID", field: "id", width: 70, maxWidth: 100, sortable: true, sorter: numericSorter, },
      { id: "typeProjet", name: "Type de projet", field: "typeProjet", width: 70, maxWidth: 250, formatter: typeProjetFormatter, sortable: true, sorter: stringSorter, },
      { id: "typeSite", name: "Type de Bien", field: "typeSite", width: 70, maxWidth: 250, formatter: typeSiteFormatter, sortable: true, sorter: stringSorter, },
      { id: "departement", name: "Département", field: "departement", sortable: true, sorter: stringSorter, maxWidth: 250 },
      { id: "potentiel", name: "Potentiel (MW)", field: "potentiel", sortable: true, cssClass: 'text-right', sorter: numericSorter, width: 100, maxWidth: 100 },
      { id: "phase", name: "Phase", field: "phase", sortable: true, sorter: stringSorter, formatter: phaseFormatter, width: 110, maxWidth: 110 },
      { id: "progression", name: "Etat", field: "progression", sortable: true, sorter: stringSorter, formatter: progressionFormatter, width: 110, maxWidth: 110 },
      { id: "progressionIndicateur", name: "<i style='color:red;font-size: 1.3em;' class='fa fa-flag-checkered'></i>", field: "progressionIndicateur", width: 26, maxWidth: 26, cssClass: 'column-progression-indicateur', formatter: progressionIndicateurFormatter },
      { id: "servitudes", name: "Servitudes", field: "servitudes", sortable: true, sorter: stringSorter, formatter: dynamiqueFormatter, maxWidth: 250 },
      { id: "environnement", name: "Environnement", field: "environnement", sortable: true, sorter: stringSorter, formatter: dynamiqueFormatter, maxWidth: 250 },
      { id: "monuments", name: "Monuments", field: "monuments", sortable: true, sorter: stringSorter, formatter: dynamiqueFormatter, maxWidth: 250 },
      { id: "paysages", name: "Paysages", field: "paysages", sortable: true, sorter: stringSorter, formatter: dynamiqueFormatter, maxWidth: 250 },
      { id: "urbanisme", name: "Urbanisme", field: "urbanisme", sortable: true, sorter: stringSorter, formatter: dynamiqueFormatter, maxWidth: 250 },
      { id: "dateCrea", name: '<strong>Date création</strong>', field: "dateCrea", sortable: true, sorter: dateSorter, width: 100, maxWidth: 250},
      { id: "dateMaj", name: '<strong>Date majour</strong>', field: "dateMaj", sortable: true, sorter: dateSorter, width: 100, maxWidth: 250},
      { id: "dateDiff", name: "<strong>J+</strong>", field: "dateDiff", sortable: true, sorter: stringSorter, formatter: progressionFormatter, width: 40, maxWidth: 100 },
    {% elseif columnsType == 6 %}
      checkboxColumn,
      { id: "id", name: "ID", field: "id", width: 70, maxWidth: 100, sortable: true, sorter: numericSorter, },
      { id: "typeProjet", name: "Type de projet", field: "typeProjet", width: 70, maxWidth: 250, formatter: typeProjetFormatter, sortable: true, sorter: stringSorter, },
      { id: "typeSite", name: "Type de Bien", field: "typeSite", width: 70, maxWidth: 250, formatter: typeSiteFormatter, sortable: true, sorter: stringSorter, },
      { id: "departement", name: "Département", field: "departement", sortable: true, sorter: stringSorter, maxWidth: 250 },
      { id: "potentiel", name: "Potentiel (MW)", field: "potentiel", sortable: true, cssClass: 'text-right', sorter: numericSorter, width: 100, maxWidth: 100 },
      { id: "phase", name: "Phase", field: "phase", sortable: true, sorter: stringSorter, formatter: phaseFormatter, width: 110, maxWidth: 110 },
      { id: "progression", name: "Etat", field: "progression", sortable: true, sorter: stringSorter, formatter: progressionFormatter, width: 110, maxWidth: 110 },
      { id: "progressionIndicateur", name: "<i style='color:red;font-size: 1.3em;' class='fa fa-flag-checkered'></i>", field: "progressionIndicateur", width: 26, maxWidth: 26, cssClass: 'column-progression-indicateur', formatter: progressionIndicateurFormatter },
      { id: "origine", name: "Source", field: "origine", sortable: true, sorter: stringSorter, width: 130, maxWidth: 250 },
      { id: "chefProjet", name: "Chef de projet", field: "chefProjet", sortable: true, sorter: stringSorter, width: 130, maxWidth: 250 },
      { id: "chargeFoncier", name: "Charge du foncier", field: "chargeFoncier", sortable: true, sorter: stringSorter, width: 130, maxWidth: 250 },
      { id: "partenaire", name: "Partenaire", field: "partenaire", sortable: true, sorter: stringSorter, width: 130, maxWidth: 250 },
      { id: "dateCrea", name: '<strong>Date création</strong>', field: "dateCrea", sortable: true, sorter: dateSorter, width: 100, maxWidth: 250},
      { id: "dateMaj", name: '<strong>Date majour</strong>', field: "dateMaj", sortable: true, sorter: dateSorter, width: 100, maxWidth: 250},
      { id: "dateDiff", name: "<strong>J+</strong>", field: "dateDiff", sortable: true, sorter: stringSorter, formatter: progressionFormatter, width: 40, maxWidth: 100 },
    {% endif %}
    ];

    function filter(item, args){
      if (args.unread != "" && item["unread"] !== args.unread) {
          return false;
      }

      if (args.typeProjet != "" && item["typeProjet"] !== args.typeProjet) {
          return false;
      }

      if (args.origine != "" && item["origine"] !== args.origine) {
          return false;
      }

      if (args.chefProjet != "" && item["chefProjet"] !== args.chefProjet) {
          return false;
      }

      if (args.chargeFoncier != "" && item["chargeFoncier"] !== args.chargeFoncier) {
          return false;
      }

      if (args.partenaire != "0" && item["partenaire"] !== args.partenaire) {
          return false;
      }

      if (args.departement != "" && item["departement"] !== args.departement) {
          return false;
      }

      return true;
    }

    $(function () {
      var data = [];
      {% for projet in projets %}
        if(!$('#select-origine option[value="{{ projet.origine }}"]').length) {
          $('#select-origine').append(new Option("{{ projet.origine }}", "{{ projet.origine }}" {% if projet.origine == origine %}, true{% endif %}));
        }
        if(!$('#select-chefProjet option[value="{{ projet.chefProjet }}"]').length) {
          $('#select-chefProjet').append(new Option("{{ projet.chefProjet }}", "{{ projet.chefProjet }}" {% if projet.chefProjet == chefProjet %}, true, '{{ chefProjet }}'{% else %}, false, '{{ chefProjet }}'{% endif %}));
        }
        if(!$('#select-chargeFoncier option[value="{{ projet.chargeFoncier }}"]').length) {
          $('#select-chargeFoncier').append(new Option("{{ projet.chargeFoncier }}", "{{ projet.chargeFoncier }}" {% if projet.chargeFoncier == chargeFoncier %}, true{% endif %}));
        }
        if(!$('#select-partenaire option[value="{{ projet.partenaire }}"]').length) {
          $('#select-partenaire').append(new Option("{{ projet.partenaire }}", "{{ projet.partenaire }}" {% if projet.partenaire == partenaire %}, true{% endif %}));
        }
        if(!$('#select-departement option[value="{{ projet.departement|e('js') }}"]').length) {
          $('#select-departement').append(new Option("{{ projet.departement|e('js') }}", "{{ projet.departement|e('js') }}" {% if projet.departement == departement %}, true{% endif %}));
        }
        {% set listeDate = false %}
        {% set unreadMessage = false %}
        {# {% if is_granted('edit', projet) %} #}
          {% for message in projet.messages %}
            {% if message.createdBy is null or (app.user.id != message.createdBy.id and app.user not in message.viewers) %}{% set unreadMessage = true %}{% endif %}
          {% endfor %}
        {# {% endif %} #}
        data.push({
          id: {{ projet.id }},
          unread: {% if unreadMessage %}'1'{% else %}'0'{% endif %},
          typeProjet: '{{ projet.typeProjet }}',
          typeSite: '{{ projet.typeSite }}',
          origine: '{{ projet.origine }}',
          chefProjet: '{{ projet.chefProjet }}',
          chargeFoncier: '{{ projet.chargeFoncier }}',
          partenaire: '{{ projet.partenaire }}',
          potentiel: {{ projet.potentiel }},
          completude: {{ projet.completude }},
          region: '{{ projet.departement.region|e('js') }}',
          departement: '{{ projet.departement|e('js') }}',
          environnement: '{{ projet.environnement }}',
          {% set communeFound = false %}
          {% for commune in projet.communes %}
            {% if not loop.index0 %}
            {% set communeFound = true %}
            commune: '{{ commune.nom }}',
            {% endif %}
          {% endfor %}
          {% if not communeFound %}
            commune: '',
          {% endif %}
          {% if columnsType == 1 %}
          plan: {{ projet.documents|length }},
          {% endif %}
          {% if columnsType == 2 %}
            {% set servitudes = false %}
            {% set foncier = false %}
            {% set mairie = false %}
            {% set consultations = false %}
            {% set urbanisme = false %}
            {% set concertation = false %}
            {% for tache in projet.taches %}
              {% if tache.objet == 'servitudes'%}
              {% set servitudes = true %}servitudes: '{{ tache.etat }}',
              {% elseif tache.objet == 'foncier'%}
              {% set foncier = true %}foncier: '{{ tache.etat }}',
              {% elseif tache.objet == 'mairie'%}
              {% set mairie = true %}mairie: '{{ tache.etat }}',
              {% elseif tache.objet == 'consultations'%}
              {% set consultations = true %}consultations: '{{ tache.etat }}',
              {% elseif tache.objet == 'urbanisme'%}
              {% set urbanisme = true %}urbanisme: '{{ tache.etat }}',
              {% elseif tache.objet == 'concertation'%}
              {% set concertation = true %}concertation: '{{ tache.etat }}',
              {% endif %}
              {% set listeDate = tache.date %}
            {% endfor %}
            {% if not servitudes %}servitudes: '',{% endif %}
            {% if not foncier %}foncier: '',{% endif %}
            {% if not mairie %}mairie: '',{% endif %}
            {% if not consultations %}consultations: '',{% endif %}
            {% if not urbanisme %}urbanisme: '',{% endif %}
            {% if not concertation %}concertation: '',{% endif %}
          {% endif %}
          {% if columnsType == 3 %}
            {% set phase = '' %}
            {% set etatValue = '' %}
            {% set dynamique = '' %}
            {% for etat in projet.etats %}
              {% set phase = etat.phase %}
              {% set etatValue = etat.etat %}
              {% set dynamique = etat.dynamique %}
              {% set listeDate = etat.date %}
            {% endfor %}
            phase: '{{ phase|e('js') }}',
            progression: '{{ etatValue }}',
            dynamique: '{{ dynamique }}',
          {% endif %}
          {% if columnsType == 4 %}
            {% set foncier = false %}
            {% for tache in projet.taches %}
              {% if tache.objet == 'foncier'%}
              {% set foncier = true %}foncier: '{{ tache.etat }}',
              {% endif %}
              {% set listeDate = tache.date %}
            {% endfor %}
            {% if not foncier %}foncier: '',{% endif %}
            {% set parcelles = 0 %}
            {% set proprietaires = 0 %}
            {% set chekedParcelles = [] %}
            {% for parcelle in projet.parcelles %}
              {% set parcelles = parcelles + 1 %}
              {% set break = false %}
              {% for proprietaire in projet.proprietaires if not break %}
                {% if proprietaire.parcelles|lower not in chekedParcelles and proprietaire.parcelles|lower == parcelle.nom|lower and proprietaire.accordProprietaire == 'OUI' %}
                  {% set chekedParcelles = chekedParcelles|merge([proprietaire.parcelles|lower]) %}
                  {% set proprietaires = proprietaires + 1 %}
                  {% set break = true %}
                {% endif %}
              {% endfor %}
            {% endfor %}
            accords: '{{ proprietaires }}/{{ parcelles }}',
            accordsPourcentage: {% if proprietaires and parcelles %}{{ (proprietaires * 100 / parcelles)|round }}{% else %}0{% endif %},
          {% endif %}
          {% if columnsType == 5 %}
            {% set servitudes = false %}
            {% set environnement = false %}
            {% set monuments = false %}
            {% set paysages = false %}
            {% set urbanisme = false %}
            {% for enjeux in projet.enjeuxs %}
              {% if enjeux.facteur == 'servitudes'%}
              {% set servitudes = true %}servitudes: '{{ enjeux.risque }}',
              {% elseif enjeux.facteur == 'environnement'%}
              {% set environnement = true %}environnement: '{{ enjeux.risque }}',
              {% elseif enjeux.facteur == 'monuments'%}
              {% set monuments = true %}monuments: '{{ enjeux.risque }}',
              {% elseif enjeux.facteur == 'paysages'%}
              {% set paysages = true %}paysages: '{{ enjeux.risque }}',
              {% elseif enjeux.facteur == 'urbanisme'%}
              {% set urbanisme = true %}urbanisme: '{{ enjeux.risque }}',
              {% endif %}
            {% endfor %}
            {% if not servitudes %}servitudes: '',{% endif %}
            {% if not environnement %}environnement: '',{% endif %}
            {% if not monuments %}monuments: '',{% endif %}
            {% if not paysages %}paysages: '',{% endif %}
            {% if not urbanisme %}urbanisme: '',{% endif %}
          {% endif %}
          {% if columnsType != 3 %}
          phase: '{{ projet.phase|e('js') }}',
          progression: '{{ projet.progression }}',
          {% endif %}
          {% if listeDate %}
          {% set difference = date(listeDate).diff(date('now')) %}
          {% set dateDiff = difference.days %}
          dateCrea: '{{ listeDate|date('d/m/Y') }}',
          dateDiff: '{{ dateDiff }}',
          {% else %}
          {% set difference = date(projet.dateCreation).diff(date('now')) %}
          {% set dateDiff = difference.days %}
          dateCrea: '{{ projet.dateCreation|date('d/m/Y') }}',
          dateDiff: '{{ dateDiff }}',
          {% endif %}
          dateMaj: '{{ projet.dateMaj|date('d/m/Y') }}',
          progressionIndicateur: '{{ projet.progression }}',
          canEdit: {{ is_granted('edit', projet) ? 1 : 0 }},
        });
      {% endfor %}
      var filterArgs = {
        unread: "",
        typeProjet: "",
        origine: "",
        chefProjet: "",
        chargeFoncier: "",
        partenaire: "",
        departement: "",
      };
      function updateFilter(){
        dataView.setFilterArgs(filterArgs);
        dataView.refresh();
      }
      $(".input-filter").change(function (e) {
        filterArgs[$(this).data('attr')] = this.value;
        updateFilter();
        filterName = $(this).data('attr');
        filterValue = this.value;
        $('a.page-link').each(function() {
          regex1 = new RegExp('&' + filterName + '=.+?&', 'gi');
          regex2 = new RegExp('&' + filterName + '=.+', 'gi');
          var href = $(this).attr('href').replace(regex1, '&').replace(regex2, '');
          $(this).attr('href', href);
          if(filterValue && filterValue != '0') {
            $(this).attr('href', href + '&' + filterName + '=' + filterValue);
          }
        });
      });
      $(".input-filter").change();
      $('#button-unread').click(function() {
        if($(this).hasClass('btn-outline-success')) {
          filterArgs['unread'] = '1';
          $(this).removeClass('btn-success').removeClass('btn-outline-success');
          $(this).addClass('btn-danger').addClass('btn-outline-danger');
          updateFilter();
        } else {
          filterArgs['unread'] = '';
          $(this).removeClass('btn-danger').removeClass('btn-outline-danger');
          $(this).addClass('btn-success').addClass('btn-outline-success');
          updateFilter();
        }
      });

      dataView.beginUpdate();
      dataView.setItems(data);

      dataView.setFilterArgs(filterArgs);

      dataView.setFilter(filter);
      dataView.endUpdate();

      grid = new Slick.Grid("#grid", dataView, columns, options);
      grid.registerPlugin( new Slick.AutoTooltips({ enableForHeaderCells: true }) );
      grid.registerPlugin(checkboxSelector);
      grid.setSelectionModel(new Slick.RowSelectionModel({selectActiveRow: false}));

      var headerButtonsPlugin = new Slick.Plugins.HeaderButtons();
      headerButtonsPlugin.onCommand.subscribe(function(e, args) {
        var button = args.button;
        var command = args.command;
        if (command == "toggle-date") {
          if (button.cssClass == "switch-current-crea") {
            button.cssClass = "switch-current-maj";
            args.column.field = 'dateMaj';
            args.column.name = 'Date création<br><strong>Date majour</strong>';
          } else {
            button.cssClass = "switch-current-crea";
            args.column.field = 'dateCrea';
            args.column.name = '<strong>Date création</strong><br>Date majour';
          }
          grid.setColumns(grid.getColumns());
        }
      });

      grid.registerPlugin(headerButtonsPlugin);

      grid.autosizeColumns();

      dataView.syncGridSelection(grid, true);

      grid.onSelectedRowsChanged.subscribe(function() {
        selectedRows = grid.getSelectedRows();
        var selected = selectedRows.length;
        var total = grid.getDataLength();

        var ids = [];
        for (var i = 0, len = selectedRows.length; i < len; ++i) {
          var item = dataView.getItem(selectedRows[i]);
          ids.push(item.id);
        }

        if (selected > 1) {
          $('#button-delete').prop('disabled', false);
          $('#button-edit').addClass('disabled');
          $('#button-archive').removeClass('disabled');
          $('#button-pdf').addClass('disabled');
          $('#button-show').removeClass('disabled');
          $('#button-export').removeClass('disabled');
          $('#button-show').attr('href', Routing.generate('projet_index', { show: ids.join() }));

        } else if (selected === 1) {

          var item = dataView.getItem(selectedRows[0]);
          var id = item.id;
          $('#button-delete').prop('disabled', false);

          if (item.canEdit) {
            $('#button-edit').removeClass('disabled');
            $('#button-edit').attr('href', Routing.generate('projet_edit', { id: id }));
            $('#button-archive').removeClass('disabled');
            $('#button-pdf').removeClass('disabled');
            $('#button-pdf').attr('href', Routing.generate('projet_pdf', { id: id }));
          }

          $('#button-show').removeClass('disabled');
          $('#button-export').removeClass('disabled');
          $('#button-show').attr('href', Routing.generate('projet_index', { show: ids.join() }));

        } else {
          $('#button-delete').prop('disabled', true);
          $('#button-edit').addClass('disabled');
          $('#button-archive').addClass('disabled');
          $('#button-pdf').addClass('disabled');
          $('#button-show').addClass('disabled');
          $('#button-export').addClass('disabled');
        }



        if (selected > 1) {
          $('#selected-counter').text(selected + ' sites sélectionnés sur ' + total);
        } else {
          $('#selected-counter').text(selected + ' site sélectionné sur ' + total);
        }

      });

      dataView.onRowCountChanged.subscribe(function (e, args) {

        grid.setSelectedRows([]);
        grid.updateRowCount();
        grid.render();
      });
      
      dataView.onRowsChanged.subscribe(function (e, args) {
        grid.invalidateRows(args.rows);
        grid.render();
      });

      grid.onSort.subscribe(function(e, args) {
        sortdir = args.sortAsc ? 1 : -1;
        sortcol = args.sortCol.field;
        dataView.sort(args.sortCol.sorter, sortdir);
        args.grid.invalidateAllRows();
        args.grid.render();
      });

      $(window).resize(function(){
        $("#grid").css({ top: $('#start-grid').position().top + 'px' });
        grid.resizeCanvas();
      });
      
      $('#button-export').click(function () {
        var ids = dataView.mapRowsToIds(selectedRows);
        $('#export-csv-ids').val(ids.join());
        $('#csv-form').attr('action', Routing.generate('projet_bulk_csv'));
        $('#export-modal').modal('toggle');
      });
      {% if liste.id is defined %}
      $('#button-liste-delete').dblclick(function() {
        swal({
          title: "Supprimer La Liste « {{liste.listeOriginalName}} » ?",
          text: "La liste avec tous ces sites seront supprimés définitivement.",
          type: "warning",
          showCancelButton: true,
          confirmButtonColor: "#DD6B55",
          confirmButtonText: "Supprimer",
          cancelButtonText: "Annuler",
          closeOnConfirm: false,
          closeOnCancel: true,
          allowOutsideClick: true,
          showLoaderOnConfirm: true,
        },
        function(isConfirm){
          if (isConfirm) {
            var csrf = '{{ csrf_token('token')|e('js') }}';
            $.ajax({
              url: Routing.generate('liste_delete'),
              type: 'DELETE',
              data: { id: {{ liste.id }}, token: csrf  },
              success: function(result) {
                location.reload();
              }
            });
          } else {

          }
        });
      });
      {% endif %}
      $('#button-archive').click(function() {
        var selectedRows = grid.getSelectedRows();

        if (selectedRows.length == 0) {
          return;
        }

        var ids = dataView.mapRowsToIds(selectedRows);

        swal({
          title: "Archiver ?",
          text: "Les sites sélectionnés seront archivés.",
          type: "warning",
          showCancelButton: true,
          confirmButtonColor: "#F0AD4E",
          confirmButtonText: "Archiver",
          cancelButtonText: "Annuler",
          closeOnConfirm: false,
          closeOnCancel: true,
          allowOutsideClick: true,
          showLoaderOnConfirm: true,
        },
        function(isConfirm){
          if (isConfirm) {
            var csrf = '{{ csrf_token('token')|e('js') }}';
            $.ajax({
              url: Routing.generate('projet_batch_archive'),
              type: 'POST',
              data: { ids: ids, token: csrf  },
              success: function(result) {
                location.reload();
              }
            });
          } else {

          }
        });

      });
      $('#button-delete').dblclick(function() {
        var selectedRows = grid.getSelectedRows();

        if (selectedRows.length == 0) {
          return;
        }

        var ids = dataView.mapRowsToIds(selectedRows);

        swal({
          title: "Supprimer ?",
          text: "Les sites sélectionnés seront supprimés définitivement.",
          type: "warning",
          showCancelButton: true,
          confirmButtonColor: "#DD6B55",
          confirmButtonText: "Supprimer",
          cancelButtonText: "Annuler",
          closeOnConfirm: false,
          closeOnCancel: true,
          allowOutsideClick: true,
          showLoaderOnConfirm: true,
        },
        function(isConfirm){
          if (isConfirm) {
            var csrf = '{{ csrf_token('token')|e('js') }}';
            $.ajax({
              url: Routing.generate('projet_batch_delete'),
              type: 'DELETE',
              data: { ids: ids, token: csrf  },
              success: function(result) {
                location.reload();
              }
            });
          } else {

          }
        });

      });

    });
  </script>

{% endblock %}