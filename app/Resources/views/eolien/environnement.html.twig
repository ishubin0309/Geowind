{% extends 'base.html.twig' %}

{% set title = 'Parcs éoliens construits' %}
{% set item = 'cartographie' %}

{% set zone = 'eolien' %}

{% block css %}
  <link rel="stylesheet" href="{{ asset('vendor/Leaflet.markercluster-1.1.0/dist/MarkerCluster.css') }}">
  <link rel="stylesheet" href="{{ asset('vendor/Leaflet.markercluster-1.1.0/dist/MarkerCluster.Default.css') }}">
{% endblock %}

{% block body %}
  <div class="container">
    <div class="page-title">
      <h1>
        <strong>Parcs éoliens construits</strong>
        <div class="btn-group col-sm-offset-3" role="group" aria-label="...">
          <a href="{{ asset('Essai.geojson') }}" class="btn btn-success btn-sm" download><i class="fa fa-fw fa-save"></i> Exporter</a>
          <button id="import" class="btn btn-danger btn-sm"><i class="fa fa-fw fa-paperclip"></i> Importer</a>
        </div>
        <div class="clearfix"></div>
      </h1>
    </div>
    <hr>
    <div class="row">
      
      <div class="col-sm-5">
        <div class="form-group row">
          <div class="col-sm-6">
            <input type="number" class="form-control" id="search_id" placeholder="Rechercher un ID">
          </div>
          <div class="col-sm-6">
            <input type="text" class="form-control" id="search_mise_en_service" placeholder="Année de mise en service">
          </div>
        </div>
        
        <div id="loading-text" class="loading-text m-t-10"><i class="fa fa-spinner fa-spin fa-fw"></i> Chargement ...</div>
        <div id="projet-data" class="m-t-10"></div>
      </div>
      <div class="col-sm-7">
        <div class="form-group">
          <input type="text" class="form-control" id="location" placeholder="Rechercher une adresse">
        </div>
        <div id="map" class="map map-home"></div>
        <div id="map_search">
          <div class="form-group form-group-sm">
            <label class="col-md-4 control-label" for="circleRadius">Rayon du cercle</label>
            <div class="col-md-4">
              <select id="circleRadius" class="form-control">
                <option value="0">Point</option>
                <option value="100">0.1km</option>
                <option value="500">0.5km</option>
                <option value="1000">1km</option>
                <option value="5000">5km</option>
                <option value="10000">10km</option>
                <option value="15000">15km</option>
                <option value="20000">20km</option>
                <option value="25000">25km</option>
                <option value="30000">30km</option>
                <option value="50000">50km</option>
                <option value="70000">70km</option>
              </select>
            </div>
          </div>
          {# <div class="form-group form-group-sm">
            <label class="col-sm-4 control-label">Rechercher une adresse</label>
            <div class="col-sm-8">
              <input type="text" class="form-control" id="location" placeholder="Rechercher une adresse">
            </div>
          </div> #}
        </div>
      </div>
    </div>
    <div class="row hide">
      <div class="col-xs-12">
        
        {{ form_start(form) }}
        <fieldset>
          <legend>Importer</legend>
          <div class="col-xs-4">
          {{ form_row(form.importFile) }}
          </div>
          <div class="col-xs-2">
            <button id="import_submit" type="submit" class="btn btn-primary"><i class="fa fa-paperclip"></i> Importer</button>
          </div>
        </fieldset>
        
        {{ form_rest(form) }}
        {{ form_end(form) }}
      </div>
    </div>
  </div>
{% endblock %}

{% block js %}
  <script src="{{ asset('vendor/Leaflet.markercluster-1.1.0/dist/leaflet.markercluster.js') }}"></script>
  <script src="https://france-cadastre.fr/assets/js/leaflet-providers.js"></script>
  <script src="https://unpkg.com/leaflet.vectorgrid@latest/dist/Leaflet.VectorGrid.bundled.js"></script>
  <script src="https://unpkg.com/leaflet-canvas-marker@0.2.0/dist/leaflet.canvas-markers.js"></script>
  <script>
    var parcs = [];
    var regions = {};
    {% set regions = [] %}
    {% set createdAt = 0 %}
    {% set nombreParcs = 0 %}
    {% set puissanceParcs = 0 %}
    {% set region = '-' %}
    {% for parc in parcs %}
    {% set nombreParcs = nombreParcs + 1 %}
    {% set puissanceParcs = puissanceParcs + parc.puissanceNominaleUnitaire %}
    {% if not createdAt %}{% set createdAt = parc.createdAt %}{% endif %}
    {% if parc.region %}{% set region = parc.region %}{% endif %}
      parcs.push({
        id: {{ parc.id }},
        longitude: {{ parc.longitude }},
        latitude: {{ parc.latitude }},
        denomination: '{{ parc.denomination is not empty ? parc.denomination|e('js') : parc.id }}',
        mise_en_service: '{{ parc.miseEnService }}'
      });
      if(regions['{{ region }}'] === undefined) regions['{{ region }}'] = {0: 1, 1: {{ parc.puissanceNominaleUnitaire }}};
      else {
        regions['{{ region }}'] = {0: (regions['{{ region }}'][0] + 1), 1: (regions['{{ region }}'][1] + {{ parc.puissanceNominaleUnitaire }})};
      }
    {% endfor %}
    var projet_data_default = '<strong>Nombre d\'éoliennes</strong>: {{ nombreParcs }}<br><strong>Puissance installée (MW)</strong>: {{ puissanceParcs / 1000 }}{% if createdAt %}<br><strong>Date d\'import</strong>: {{ createdAt|date("d/m/Y H:i") }}{% endif %}';
    projet_data_default += '<br><br><table class="table table-striped"><thead><tr><th>Région</th><th>Nombre de machines</th><th>Puissance installée (MW)</th></tr></thead><tbody>';
    $.each(regions, function(index, region) {
      projet_data_default += '<tr><td>'+index+'</td><td>'+region[0]+'</td><td>'+(Math.round(region[1])/1000)+'</td></tr>';
    });
    projet_data_default += '</tbody></table>';
    $('#projet-data').html(projet_data_default);
    $('#map').height(function(index, height) {
      return window.innerHeight - $(this).offset().top - 40;
    });

    var map = L.map('map').setView([46, 2], 5.5);
    
    var streetLayer = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    var googleHybrid = L.tileLayer('http://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}',{
        maxZoom: 20,
        subdomains:['mt0','mt1','mt2','mt3']
    });

    var googleTerrain = L.tileLayer('http://{s}.google.com/vt/lyrs=p&x={x}&y={y}&z={z}',{
        maxZoom: 20,
        subdomains:['mt0','mt1','mt2','mt3']
    });

    var baseMaps = {
        "Rue": streetLayer,
        "Aérienne": googleHybrid,
        "Terrain": googleTerrain
    };
    L.control.layers(baseMaps).addTo(map);

    var theCircle = null;
    var theCircles = [];

    var fixedCircle = {
      radius: 6,
      fillColor: "#0078A8",
      color: "#000",
      weight: 1,
      opacity: 1,
      fillOpacity: 0.8
    };

    var dynamicCircle = {
      color: "orange",
      opacity: 1,
      fillOpacity: 0
    };

    function updateCircleRadius(lat, long) {
      var dist = document.getElementById("circleRadius").value;
      xy = [lat, long];  //center point of circle
      var theRadius = parseInt(dist);
      // draw circle to see the selection area
      if(theRadius) {
        theCircle = L.circle(xy, theRadius , {   // Number is in Meters
          color: 'orange',
          fillOpacity: 0,
          opacity: 1
        }).addTo(map);
      }
      else {
        theCircle = L.circleMarker(xy, fixedCircle).addTo(map);
      }
      theCircles.push(theCircle);
    }

    var customControl =  L.Control.extend({

      options: {
        position: 'topleft'
      },

      onAdd: function (map) {
        var container = L.DomUtil.create('a');
        container.setAttribute("role", "button");
        container.title = 'Centre';
        container.text = "⊗";

        container.style.backgroundColor = 'white';     
        {# container.style.backgroundImage = "url(https://t1.gstatic.com/images?q=tbn:ANd9GcR6FCUMW5bPn8C4PbKak2BJQQsmC-K9-mbYBeFZm1ZM2w2GRy40Ew)"; #}
        container.style.backgroundSize = "30px 30px";
        container.style.width = '32px';
        container.style.height = '32px';
        container.style.lineHeight = '28px';
        container.style.textDecoration = 'none';
        container.style.cursor = 'pointer';
        container.style.textAlign = 'center';
        container.style.color = '#0078A8';
        container.style.fontSize = '22px';
        container.style.borderRadius = '4px';
        container.style.marginTop = '2px';
        container.style.border = '2px solid rgba(0,0,0,0.2)';
        
        container.onmouseover = function(){
          container.style.backgroundColor = '#f4f4f4'; 
        }
        container.onmouseout = function(){
          container.style.backgroundColor = 'white'; 
        }

        container.onclick = function() {
          update_marker = 0;
          map.setView([46,2],5);
        }

        return container;
      }
    });

    map.addControl(new customControl());

    var addCircles = false;

    function clearTheCircles() {
      if (theCircles.length) {
          $.each(theCircles, function(i, theCircle) {
            map.removeLayer(theCircle);
          });
          theCircles = [];
        }
    }

    var customControl =  L.Control.extend({

      options: {
        position: 'topleft'
      },

      onAdd: function (map) {
        var container = L.DomUtil.create('a');
        container.setAttribute("role", "button");
        container.title = "Ne pas ajouter des cercles";
        container.text = '〇';

        container.style.backgroundColor = 'white';     
        {# container.style.backgroundImage = "url(https://t1.gstatic.com/images?q=tbn:ANd9GcR6FCUMW5bPn8C4PbKak2BJQQsmC-K9-mbYBeFZm1ZM2w2GRy40Ew)"; #}
        container.style.backgroundSize = "30px 30px";
        container.style.width = '32px';
        container.style.height = '32px';
        container.style.textDecoration = 'none';
        container.style.cursor = 'pointer';
        container.style.textAlign = 'center';
        container.style.color = '#FF0000';
        container.style.fontSize = '18px';
        container.style.borderRadius = '4px';
        container.style.marginTop = '2px';
        container.style.border = '2px solid rgba(0,0,0,0.2)';
        
        container.onmouseover = function(){
          container.style.backgroundColor = '#f4f4f4'; 
        }
        container.onmouseout = function(){
          container.style.backgroundColor = 'white';
        }

        container.onclick = function() {
          update_marker = 0;
          if(addCircles) {
            addCircles = 0;
            clearTheCircles();
            container.text = '〇';
            container.title = "Ne pas ajouter des cercles";
          } else {
            addCircles = 1;
            container.text = '⬤';
            container.title = "Ajouter des cercles";
          }
        }

        return container;
      }
    });

    map.addControl(new customControl());

    var CoreParcelle = L.Control.LinearCore.extend({
      onSelect: function(e){

        if(!e.total){
          return;
        }

        var distanceParcelle = e.total.scalar;

        if(e.total.unit === 'mi'){
          distanceParcelle *= e.sub_unit;

        } else if(e.total.unit === 'km'){
          distanceParcelle *= 3280.84;

        } else if(e.total.unit === 'm'){
          distanceParcelle *= 3.28084;
        }
      }
    });
    map.addControl(new CoreParcelle({
      unitSystem: 'metric',
      color: '#FF0080',
      features: ['ruler']
    }));

    L.simpleMapScreenshoter().addTo(map);

    var measureControl = new L.Control.Measure({ 
      position: 'topleft', 
      primaryLengthUnit: 'meters', 
      secondaryLengthUnit: 'kilometers', 
      primaryAreaUnit: 'sqmeters', 
      secondaryAreaUnit: 'hectares', 
      activeColor: '#991f00', 
      completedColor: '#ff9980', 
      decPoint: ',', 
      thousandsSep: ' ' 
    });
    measureControl.addTo(map);
    
    var update_marker = 1;
    map.on('click', function(e) {
      if(update_marker) {
        lat = e.latlng.lat;
        long = e.latlng.lng;
        if (!addCircles) {
          {# updateMarkerPosition(); #}
        } else {
          updateCircleRadius(lat, long)
        }
      } else update_marker = 1;
    });

    var markers = {};
    
    var markerIcon = new L.DivIcon.SVGIcon({
      color: '#E53935',
      fillOpacity: 0.7
    });

    var markers = L.markerClusterGroup({
      maxClusterRadius: 40,
    });
    
    var mise_en_service = 0;
    var parcMarkers = {};  
    function loadMarkers() {
      markers.clearLayers();
      parcMarkers = {};
      $.each(parcs, function(index, parc) {
        if(!mise_en_service || parc.mise_en_service.match(mise_en_service)) {
          var marker = L.marker([parc.latitude, parc.longitude], {
            id: parc.id, 
            icon: markerIcon,
            denomination: parc.denomination,
          })
          .bindTooltip(showTooltip)
          .bindPopup(showPopup)
          .on('click', onMarkerClick);
          
          markers.addLayer(marker);
          
          parcMarkers[parc.id] = marker;
        }
      });
    
      map.addLayer(markers);
    }
    loadMarkers();
      
      
    function showPopup(layer) {
      var status = layer.options.denomination;
      return status;
    }
    
    function showTooltip(layer) {
      var status = layer.options.denomination;
      return status;
    }

    function onMarkerClick(e) {
      var id = this.options.id;
      loadData(id);
    }
    
    function loadData(id) {
      $('#loading-text').show();
      $('#projet-data').hide();
      
      $('#projet-data').load(Routing.generate('parc_data', { id: id }), '', function() {
        $('#loading-text').hide();
        $('#projet-data').show();
      });
    }
    
    function focusOn(id) {
      markers.zoomToShowLayer(parcMarkers[id]);
      parcMarkers[id].openPopup();
      loadData(id);
    }
    
    $('#search_id').change(function() {
      
      if (parcMarkers[$(this).val()] != undefined) {
        focusOn($(this).val());
        $(this).val('');
        $(this).parent().removeClass('has-error');
      } else {
        $(this).parent().addClass('has-error');
      }
      
    });
    
    $('#search_mise_en_service').change(function() {
      
      year = $(this).val().trim();
      if(year) {
        mise_en_service = year;
      } else mise_en_service = 0;
      loadMarkers();
    });
    
    $('#location').change(function() {
      
      var nominatimUrl = 'https://nominatim.openstreetmap.org/search';
      $input = $(this);

      var query = $('#location').val();
      $.ajax({
        type: 'GET',
        url: nominatimUrl,
        data: {
          q: query,
          extratags: 0,
          namedetails: 0,
          polygon_geojson: 0,
          format: 'json',
        },
        dataType: 'json',

      })
      .done(function(data) {

        if (data.length === 0) {
          $input.parent().addClass('has-error');
          return;
        }

        var lat = data[0]['lat'];
        var lon = data[0]['lon'];
        var bbox = data[0]['boundingbox'];
        
        if (bbox != undefined) {
          map.fitBounds([
            [bbox[0], bbox[2]],
            [bbox[1], bbox[3]]
          ]);
        } else {
          map.setView([lat, lon], 10);
        }
        
        $input.parent().removeClass('has-error');
        
      });
      
    });
    
  $.getJSON('{{ asset('Essai.geojson') }}', function(zone_naturelles_protegees) {
    L.geoJSON(zone_naturelles_protegees, {}).addTo(map);
  });
      
      
    
  {% if focus_id is not null %}
    focusOn({{ focus_id }});
  {% endif %}
  
  $('#import').click(function() {
    $('#import_importFile').click();
  });
  var count = 1;
  
  $('#import_importFile').change(function() {
    swal({
        title: "Importer ce fichier ?",
        text: "Exporter le fichier geojson avant l'import.",
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#DD6B55",
        confirmButtonText: "Importer",
        cancelButtonText: "Annuler",
        closeOnConfirm: false,
        closeOnCancel: true,
        allowOutsideClick: true,
        showLoaderOnConfirm: true,
      },
      function(isConfirm){
        if (isConfirm) {
          $('#import_importFile').parents('form').submit();
        } else {

        }
    });
  });
  </script>
{% endblock %}