{% extends 'base.html.twig' %}

{% set title = 'Cartographie des parcs éoliens construits' %}
{% set item = 'cartographie' %}

{% set zone = 'eolien' %}

{% block css %}
  <link rel="stylesheet" href="{{ asset('vendor/Leaflet.markercluster-1.1.0/dist/MarkerCluster.css') }}">
  <link rel="stylesheet" href="{{ asset('vendor/Leaflet.markercluster-1.1.0/dist/MarkerCluster.Default.css') }}">
{% endblock %}

{% block body %}
  <div class="container">
    <h2>Cartographie des parcs éoliens construits</h2>
    <div class="row">
      
      
      <div class="col-sm-5">
        <div class="form-group">
          <input type="number" class="form-control" id="search" placeholder="Chercher un ID">
        </div>
        
        <div id="loading-text" class="loading-text m-t-10"><i class="fa fa-spinner fa-spin fa-fw"></i> Chargement ...</div>
        <div id="projet-data" class="m-t-10"></div>
      </div>
      <div class="col-sm-7">
        <div class="form-group">
          <input type="text" class="form-control" id="location" placeholder="Chercher une adresse">
        </div>
        <div id="map" class="map map-home"></div>
      </div>
    </div>
  </div>
        
{% endblock %}

{% block js %}
  <script src="{{ asset('vendor/Leaflet.markercluster-1.1.0/dist/leaflet.markercluster.js') }}"></script>
  <script>
    
    var parcs = [];
    
    {% for parc in parcs %}
      parcs.push({
        id: {{ parc.id }},
        longitude: {{ parc.longitude }},
        latitude: {{ parc.latitude }},
        denomination: '{{ parc.denomination is not empty ? parc.denomination|e('js') : parc.id }}'
      });
    {% endfor %}
    
    $('#map').height(function(index, height) {
      return window.innerHeight - $(this).offset().top - 40;
    });

    var map = L.map('map').setView([46, 2], 5.5);

    L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    var markers = {};
    
    var markerIcon = new L.DivIcon.SVGIcon({
      color: '#E53935',
      fillOpacity: 0.7
    });

    var markers = L.markerClusterGroup({
      maxClusterRadius: 40,
    });
    
    var parcMarkers = [];  

    $.each(parcs, function(index, parc) {

      var marker = L.marker([parc.latitude, parc.longitude], {
        id: parc.id, 
        icon: markerIcon,
        denomination: parc.denomination,
      })
      .bindTooltip(showTooltip)
      .bindPopup(showPopup)
      .on('click', onMarkerClick);
      
      markers.addLayer(marker);
      
      parcMarkers[parc.id] = marker;
    });
    
    map.addLayer(markers);
      
      
    function showPopup(layer) {
      var status = layer.options.denomination;
      return status;
    }
    
    function showTooltip(layer) {
      var status = layer.options.denomination;
      return status;
    }

    function onMarkerClick(e) {
      var id = this.options.id;
      loadData(id);
    }
    
    function loadData(id) {
      $('#loading-text').show();
      $('#projet-data').hide();
      
      $('#projet-data').load(Routing.generate('parc_data', { id: id }), '', function() {
        $('#loading-text').hide();
        $('#projet-data').show();
      });
    }
    
    function focusOn(id) {
      markers.zoomToShowLayer(parcMarkers[id]);
      parcMarkers[id].openPopup();
      loadData(id);
    }
    
    $('#search').change(function() {
      
      if (parcMarkers[$(this).val()] != undefined) {
        focusOn($(this).val());
        $(this).val('');
        $(this).parent().removeClass('has-error');
      } else {
        $(this).parent().addClass('has-error');
      }
      
    });
    
    $('#location').change(function() {
      
      var nominatimUrl = 'https://nominatim.openstreetmap.org/search';
      $input = $(this);

      var query = $('#location').val();
      $.ajax({
        type: 'GET',
        url: nominatimUrl,
        data: {
          q: query,
          extratags: 0,
          namedetails: 0,
          polygon_geojson: 0,
          format: 'json',
        },
        dataType: 'json',

      })
      .done(function(data) {

        if (data.length === 0) {
          $input.parent().addClass('has-error');
          return;
        }

        var lat = data[0]['lat'];
        var lon = data[0]['lon'];
        var bbox = data[0]['boundingbox'];
        
        if (bbox != undefined) {
          map.fitBounds([
            [bbox[0], bbox[2]],
            [bbox[1], bbox[3]]
          ]);
        } else {
          map.setView([lat, lon], 10);
        }
        
        $input.parent().removeClass('has-error');
        
      });
      
    });
      
      
    
  {% if focus_id is not null %}
    focusOn({{ focus_id }});
  {% endif %}
    
  </script>
{% endblock %}